name: Build and Deploy Frontend & Backend to ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  # ECR and ECS info
  BACKEND_ECR_REPO: <your-backend-ecr-repo>
  FRONTEND_ECR_REPO: <your-frontend-ecr-repo>
  BACKEND_IMAGE_TAG: ${{ github.sha }}
  FRONTEND_IMAGE_TAG: ${{ github.sha }}
  ECS_CLUSTER: <your-ecs-cluster>
  BACKEND_SERVICE: <your-backend-service>
  FRONTEND_SERVICE: <your-frontend-service>
  BACKEND_TASK_DEF: <your-backend-task-def-family>
  FRONTEND_TASK_DEF: <your-frontend-task-def-family>
  BACKEND_CONTAINER: <your-backend-container-name>
  FRONTEND_CONTAINER: <your-frontend-container-name>

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build backend Docker image
        run: |
          docker build -t $BACKEND_ECR_REPO:$BACKEND_IMAGE_TAG ./backend

      - name: Tag and push backend Docker image
        run: |
          docker tag $BACKEND_ECR_REPO:$BACKEND_IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$BACKEND_ECR_REPO:$BACKEND_IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$BACKEND_ECR_REPO:$BACKEND_IMAGE_TAG

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: build-and-push-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build frontend Docker image (inject API URL)
        run: |
          docker build --build-arg REACT_APP_API_URL=${{ secrets.FRONTEND_API_URL }} -t $FRONTEND_ECR_REPO:$FRONTEND_IMAGE_TAG ./frontend

      - name: Tag and push frontend Docker image
        run: |
          docker tag $FRONTEND_ECR_REPO:$FRONTEND_IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$FRONTEND_ECR_REPO:$FRONTEND_IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$FRONTEND_ECR_REPO:$FRONTEND_IMAGE_TAG

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [build-and-push-backend, build-and-push-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current backend ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition $BACKEND_TASK_DEF --query taskDefinition > backend-task-def.json

      - name: Render new backend ECS task definition with secrets
        run: |
          jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$BACKEND_ECR_REPO:$BACKEND_IMAGE_TAG" \
             --arg SECRET_KEY "${{ secrets.SECRET_KEY }}" \
             --arg DEBUG "${{ secrets.DEBUG }}" \
             --arg S3_BUCKET "${{ secrets.S3_BUCKET }}" \
             --arg S3_KEY "${{ secrets.S3_KEY }}" \
             --arg AWS_ACCESS_KEY_ID "${{ secrets.AWS_ACCESS_KEY_ID }}" \
             --arg AWS_SECRET_ACCESS_KEY "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
             --arg AWS_REGION "${{ secrets.AWS_REGION }}" \
          '(.containerDefinitions[] | select(.name=="'"$BACKEND_CONTAINER"'") | .image) = $IMAGE |
           (.containerDefinitions[] | select(.name=="'"$BACKEND_CONTAINER"'") | .environment) = [
             {"name":"SECRET_KEY","value":$SECRET_KEY},
             {"name":"DEBUG","value":$DEBUG},
             {"name":"S3_BUCKET","value":$S3_BUCKET},
             {"name":"S3_KEY","value":$S3_KEY},
             {"name":"AWS_ACCESS_KEY_ID","value":$AWS_ACCESS_KEY_ID},
             {"name":"AWS_SECRET_ACCESS_KEY","value":$AWS_SECRET_ACCESS_KEY},
             {"name":"AWS_REGION","value":$AWS_REGION}
           ]' backend-task-def.json > new-backend-task-def.json

      - name: Register new backend ECS task definition revision
        run: |
          aws ecs register-task-definition --cli-input-json file://new-backend-task-def.json

      - name: Deploy backend ECS service with new task definition
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $BACKEND_SERVICE --force-new-deployment

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current frontend ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition $FRONTEND_TASK_DEF --query taskDefinition > frontend-task-def.json

      - name: Render new frontend ECS task definition (update image only)
        run: |
          jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$FRONTEND_ECR_REPO:$FRONTEND_IMAGE_TAG" \
          '(.containerDefinitions[] | select(.name=="'"$FRONTEND_CONTAINER"'") | .image) = $IMAGE' \
          frontend-task-def.json > new-frontend-task-def.json

      - name: Register new frontend ECS task definition revision
        run: |
          aws ecs register-task-definition --cli-input-json file://new-frontend-task-def.json

      - name: Deploy frontend ECS service with new task definition
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $FRONTEND_SERVICE --force-new-deployment